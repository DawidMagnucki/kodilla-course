CREATE TABLE ISSUESLISTS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL
);

SELECT * FROM ISSUESLISTS;

CREATE TABLE ISSUES
(
    ID SERIAL PRIMARY KEY,
    ISSUESLIST_ID BIGINT UNSIGNED NOT NULL,
    SUMMARY VARCHAR(512) NOT NULL,
    DESCRIPTION VARCHAR(1024),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUELIST_ID) REFERENCES ISSUESLISTS (ID),
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS (ID)
);

INSERT INTO ISSUESLISTS (NAME) VALUES
    ('ToDo'),
    ('In progress'),
    ('Done');

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO) VALUES
    (1, 'Prepare project plan', 'Create a project timeline and milestones', 1),
    (1, 'Set up development environment', 'Install IDEs, configure database', 2),
    (1, 'Gather requirements', 'Collect business and technical requirements', 1),
    (1, 'Review design mockups', 'Check and approve the UI designs', 3),
    (1, 'Write documentation outline', 'Prepare the initial documentation structure', 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO) VALUES
    (2, 'Implement login system', 'Add authentication with password encryption', 1),
    (2, 'Design user dashboard', 'Frontend layout with dynamic data', 2),
    (2, 'Create database schema', 'Define tables, relationships and constraints', 3),
    (2, 'Set up REST API', 'Develop endpoints for CRUD operations', 2),
    (2, 'Unit testing for user module', 'Add JUnit tests for service layer', 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO) VALUES
    (3, 'Initialize Git repository', 'Set up GitHub repository for the project', 1),
    (3, 'Project kickoff meeting', 'Discuss goals, roles and timeline', 2),
    (3, 'Install necessary libraries', 'Add dependencies to project', 3),
    (3, 'Create base project structure', 'Setup packages and config files', 1),
    (3, 'Verify environment setup', 'Ensure all developers can build the project', 2);

SELECT * FROM ISSUESLISTS;
SELECT * FROM ISSUES;